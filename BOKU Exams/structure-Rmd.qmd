---
title: "Structure of an .Rmd-file"
format: html
editor: source
execute:
  echo: true
  eval: true
---

The .Rmd is the main file, where all the information about the exercise is contained. It follows a basic structure, with four sections, "Data Generation", "Question", "Solution" and "Meta-information". Their purpose will be described in detail in the following sections.

# Basic Structure

-   Data Generation (code chunk)

-   Question

-   Solution

-   Meta-information

The first section Data Generation, is marked by a code chunk, which is different from the other three sections.

``` {{r}}
# code is placed here 
```

The other three sections are marked as follows

``` r
Question3
========
text is written here. 
... 

Solution
========
more text is written here. 
```

## Data Generation

In this section of the .Rmd-file, the questions (including answer options for single/multiple choice questions), solutions, the types of questions, explanations and tolerances for solutions are created and stored in list objects for later. In addition there are many additional possibilities, like sampling data, creating graphs, importing pictures etc. which will be discussed later (See section ???????)

### Description of the lists

The five necessary lists are `questions`, `solutions`, `types`, `explanations` and `tolerances`, which all have the same length, which is equal to the number of questions in the exercise. For example, in an exercise with 5 multiple choice questions, the length of the lists is 5.

Depending on the type and simplicity of the question, some of the lists might not be necessary. (see ??????)

The list `questions` contains the answer options for single choice/multiple choice questions, not the questions itself. The actual questions are written down in the section "Question". For numeric and string questions, this list contains placeholders "", since no answer options are given. (more on the types of questios see ??????)

The list `solutions` contains the solutions for all the questions. For numeric questions, that is a number, (e.g: `123`), for string questions a string like `"hello world"` is expected. The solution for single & multiple choiche questions is a boolean vector containing `TRUE/FALSE`. For each answer option, one instance of `TRUE` or `FALSE` is needed. For example, a multiple choice question with 5 answer options, where one option (in this case the second answer option) is correct, would have a solution vector like this:

``` r
c(FALSE, TRUE, FALSE, FALSE, FALSE)
```

The list `types` specifies the type of question for each individual question. Possible values are

-   numeric ("num")

-   string ("string")

-   single choice ("schoice")

-   multiple choice ("mchoice")

The list `explanations` contains the feedback that is shown. This can be the complete solutions or additional information like the seed, that was used to create this exercise, session info, etc.

The list `tolerances` is only necessary for numeric questions, where it is desired to have an interval, in which the solution is accepted as correct, even though the numbers are not perfectly equal. This is important for accommodating rounding differences.

::: callout-warning
Careful when random generating numbers and setting an (absolute) tolerance interval that is too narrow, then the true solution could lie outside of the tolerance interval.
:::

### Creating the lists

They are initailized as empty lists, which are later filled with the desired information via subsetting. see ?????

``` r
questions <- list() 
solutions <- list() 
types <- list()
explanations <- list() 
tolerances <- list()
```

## Question

In this section, all the questions, that should be included in the exam, are written down. This is done in natural language, however bits of code (including objects), graphs, data, etc. can be included (see ??????)

Addional text, like instructions, hints, context, etc. is also written down in this section.

### Questions with answer fields

The answer fields mark the place were the answer input should be placed, for example in a moodle quiz, the place where the empty answer box is placed.

Answer fields are marked by `##ANSWERi##`where i is the number of the question, starting with 1.

::: callout-tip
### numeric example

Numeric question: How many continents are there? `##ANSWER1##`

In this case, the answer field is a placeholder, nothing will be displayed, which equals an empty answer field in moodle.
:::

For single/multiple choice questions, `##ANSWERi##` represents the answer options.

::: callout-tip
### schoice example

Single choice question: Is Vienna the capital of Austria? `##ANSWER2##`

With the correct setup, this will display `yes/no` instead of the answer field. In moodle this is a drop-down menu with the two answer options.
:::

::: callout-tip
### mchoice example

Multiple choice question with text components as answer options: The number 3 is `##ANSWER3##` 1.

Possible answer options are "greater than", "smaller than", "equal to", which would be displayed instead of the answer field. In moodle all answer options are shown as tickable boxes.
:::

possible add-ons: pictures, graphs, data, csv.files tables, R-code, etc. see description later

The function answerlist() from R/exams package converts the answer options, which are stored in the list object "questions" into the necessary format.

```{r}
1+1

#answerlist(unlist(questions), markup = "markdown")

```

``` {{r}}
1+1

answerlist(unlist(questions), markup = "markdown")
```

``` r
1+1

answerlist(unlist(questions), markup = "markdown")
```

## Solution

the Solution part is used to provide the correct solution to a question and display it in the generated output. This part is not used directly for grading but serves as documentation or a reference for review and to explain the answer. It is usefull to document the seed used to generate all the data. This is done by accesing the Seed by ??????? "Seed: r seed". If your solutions list has "TRUE/FALSE"-vectors, they need to be converted into string.

## MetaInformation

```{r, echo = FALSE} 
# Diese Variablen werden hier exemplarisch gesetzt, aber in der tatsächlichen Nutzung könnten sie dynamisch in einem vorherigen Code-Chunk erzeugt werden.
solutions <- list(42, "TRUE", c("FALSE, TRUE"))
types <- list("num", "schoice", "mchoice")
tolerances <- list("1", "0", "0")
```

To create exercises with the `R/exams` package, it's necessary to define specific properties for each exercise. These properties help Moodle to interpret and display the exercises correctly. Below are the essential fields for the MetaInformation section, along with explanations and dynamic R code for setting them up:

### exname: Exercise Name
- **Purpose**: A unique identifier for each exercise. This helps manage and retrieve exercises easily from an exercise pool.

``` r
exname: "basic_statistics_01"

```
### extitle: Exercise Title
- **Purpose**: specifies the exercise's title, providing a clear identifier that appears in Moodle, exported files, and reports.

``` r
extitle: "basic_statistics_01{story_name}"

```
### extype: Exercise Type
- **Purpose**: Specifies the type of exercise. Since we often use mixed question types, the cloze type is commonly used.

``` r
extype: cloze

```

### exsolution: Solution of Each Part
- **Purpose**: Defines the correct solutions to the exercise. Since in our exercises mostly multiple answers are needed, the different solutions are separated by \|.

Example:

``` r
exsolution: `r paste(solutions, collapse = "|")`

```

### exclozetypes: Cloze Subtypes for Each Part
- **Purpose**: When using cloze types, define each subtype for the cloze questions based on the types list. If cloze type isn't used, this parameter is not needed

Example:
``` r
exclozetypes: `r paste(types, collapse = "|")`

```

### extol: Tolerance Levels for Numeric Answers
- **Purpose**: Defines acceptable tolerances for numeric answers, useful for cloze questions with numeric solutions.

Example:
``` r
extol: `r paste(tolerances, collapse = "|")`

```
### Putting It Togheter and Dynamic Embedding
Here you can see an example of all the needed keyparameter put togheter.
Since we have all our needed informations for exsolutions, exclozetype and extol in our lists created in the Data Generation Step, we can also just access them dynamically by by embedding R code within backticks:
``` {yaml}
exname: name of the exercise
extitle: titel of the exercise
extype: cloze
exsolution: `r paste(solutions, collapse = "|")`
exclozetype: `r paste(types, collapse = "|")`
extol: `r paste(tolerances, collapse = "|")`
```
